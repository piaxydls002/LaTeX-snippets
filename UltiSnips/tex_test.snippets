priority -1
snippet testdoc "test document" A
\documentclass[a4paper,14pt,chapter]{oblivoir}
\usepackage{fapapersize}
\usepackage{amsmath}
\usepackage{amssymb}
\usefapapersize{*,*,30mm,*,30mm,*}

\usepackage{endnotes}
\usepackage{graphicx}
\usepackage{indentfirst}

\begin{document}
\oblivoirchapterstyle{default}

\title{대수학}
\author{이인석}
\date{\today}
\maketitle

\newpage

\tableofcontents

\newpage

\chapter{대수적 구조 I}
\tiny 수학 과목의 첫 강의에는 언제나 序論이 없다. 그저 묵묵히 첫 쪽부터 훈련을 시작할 뿐이다.
\section{Algebraic structure}
`기하'나 `함수'가 영어의 중국어 音借인 것과는 달리 `代數'는 중국과 우리의 고전에 연유하고 있다. 고전에서 `대수'의 뜻은 `대입하는 수' 혹은 `숫자 대신 쓰이는 기호' 정고로 생각되지만 확실하지는 않다. ``代數學(algebra)''을 정확하게 정의하는 것은 쉬운 일이 아니겠지만, ``대수학''은 \textbf{algebraic structure(대수적 구조)}들을 공부하는 學問이라고 말할 수 있다.\footnote{대수학은 代數(댓수)와 行列(항렬)을 공부하므로 족보학의 일부라는 주장도 있다\(\cdots \cdots\).}

이 節에서는 우리가 공부할 다양한 algebraic structure들을 정의한다. 우리는 이미 [I]에서 F-vector space와 ${1: group이라고 치고 Tab 누르세요)}이라는 algebraic structure를 배웠다.

${1/\w+\s*/\u$0/}은 가장 간단한 구조를 갖는 algebraic structure이다. 즉, $1은 ${2: Tab / Shift+Tab으로 칸들간에 이동}

\newpage

\subsection{${3: Algebraic Structure}}

다음 줄을 천천히 똑같이 따라서 쳐 보세요([tab]은 탭 키 누르기)
dm[tab]\`A\`e\`\{@bbR[tab],\`E\`d s.t.\`e<\`d<\`8[tab]
$0
Esc 누르고 :w로 저장 후 (백슬래쉬)ll으로 컴파일

더 많은 기능은 엑셀에 업데이트 예정.
\end{document}
endsnippet



priority -100
clearsnippets

global !p

from util import *

# Constants
environments = ['document',
'figure', 'table',
'description', 'enumerate', 'itemize', 'list',
'math', 'displaymath', 'array', 'eqnarray', 'equation', 'subequations', 'multiline', 'gather', 'align', 'flalign',
'theorem',
'matrix', 'pmatrix', 'bmatrix', 'Bmatrix', 'vmatrix', 'Vmatrix', 'smallmatrix',
'cases',
'alignat',
'center', 'flushleft', 'flushright', 'minipage', 'quotation', 'quote', 'verbatim', 'verse',
'picture',
'tabbing', 'tabular',
'thebibiliography',
'titlepage']

endglobal

snippet begin "begin/end" bA
\begin{${3:$1`!p snip.rv = complete(t[1], environments)`$2}}
	${VISUAL}$0
\end{$3}
endsnippet



snippet template "Basic Template" b
\documentclass[a4paper, 12pt, chapter, oneside]{oblivoir}

\usepackage{mathtools}

\begin{document}

dm[tab]
$0

\end{document}
endsnippet

post_jump "create_row_placeholders(snip)"
snippet "tr(\d+)" "latex table row variable" r
`!p snip.rv = match.group(1)`
endsnippet

post_jump "create_matrix_placeholders(snip)"
snippet 'arr(\d+),(\d+)' "LaTeX array" br
\begin{array}{`!p
orient = ""
for _ in range(0, int(match.group(1))): orient += "l"
snip.rv = orient`}
`!p
snip.rv = create_matrix(match.group(1), match.group(2), "&", "\t", "\\\\\\\\\n")
`$0
\end{array}
endsnippet

post_jump "create_matrix_placeholders(snip)"
snippet 'mat(\d+),(\d+)' "LaTeX array" br
\begin{pmatrix}
`!p
snip.rv = create_matrix(match.group(1), match.group(2), "&", "\t", "\\\\\\\\\n")
`$0
\end{pmatrix}
endsnippet

## Math Mode Accents ##

context "math()"
snippet "(?<![a-zA-Z\\])(hat|tilde|dot|ddot|bar|vec)" "accents" riA
\\`!p snip.rv = match.group(1)`{${VISUAL}$1}$0
endsnippet



## Binary Relations ##

context "math()"
snippet <= "leq" i
\leq
endsnippet

context "math()"
snippet >= "geq" i
\geq
endsnippet

context "math()"
snippet << "ll" i
\ll
endsnippet

context "math()"
snippet >> "gg" i
\gg
endsnippet

context "math()"
snippet == "equiv" i
\equiv
endsnippet

context "math()"
snippet ~ "sim" i
\sim
endsnippet

context "math()"
snippet ~= "simeq" i
\simeq
endsnippet

context "math()"
snippet ~~ "approx" i
\approx
endsnippet

context "math()"
snippet ~== "cong" i
\cong
endsnippet


## Binary Operators ##

context "math()"
snippet +- "pm" iA
\pm
endsnippet

context "math()"
snippet -+ "mp" iA
\mp
endsnippet


## Arrows ##

context "math()"
snippet <- "l arrow"
\leftarrow
endsnippet

context "math()"
snippet <-- "long l arrow"
\longleftarrow
endsnippet

context "math()"
snippet -> "r arrow"
\rightarrow
endsnippet

context "math()"
snippet --> "long r arrow"
\longrightarrow
endsnippet

context "math()"
snippet <-> "lr arrow"
\leftrightarrow
endsnippet

context "math()"
snippet <--> "long lr arrow"
\longleftrightarrow
endsnippet

context "math()"
snippet <= "L arrow"
\Leftarrow
endsnippet

context "math()"
snippet <== "long L arrow"
\Longleftarrow
endsnippet

context "math()"
snippet => "R arrow"
\Rightarrow
endsnippet

context "math()"
snippet ==> "long R arrow"
\Longrightarrow
endsnippet

context "math()"
snippet <=> "LR arrow"
\Leftrightarrow
endsnippet

context "math()"
snippet <==> "long LR arrow"
\Longleftrightarrow
endsnippet

context "math()"
snippet |-> "maps to"
\mapsto
endsnippet

context "math()"
snippet |--> "long maps to"
\longmapsto
endsnippet


context "math()"
snippet nabla "nabla" w
\nabla
endsnippet


## Non-Mathematical Symbols ##


context "math()"
snippet ddag "ddagger" w
\ddag
endsnippet



context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet



## ARITHMETIC OPERATORS ##

context "math()"
snippet xx "cross" iA
\times 
endsnippet

context "math()"
snippet ** "cdot" iA
\cdot 
endsnippet

context "math()"
snippet // "fraction" iA
\frac{${1:${VISUAL}}}{$2} $0
endsnippet


## EQUALITY, EQUIVALENCE AND SIMILARITY ##

context "math()"
snippet != "not equal" iA
\neq 
endsnippet



## SET THEORY ##

context "math()"
snippet inn "in" iA
\in 
endsnippet

context "math()"
snippet notin "not in" iA
\not\in 
endsnippet

context "math()"
snippet cc "subset" iA
\subset 
endsnippet

context "math()"
snippet Nn "cap" iA
\cap 
endsnippet

context "math()"
snippet nnn "bigcap" iA
\bigcap_{${1:i \in ${2:I}}} $0
endsnippet

context "math()"
snippet UU "cup" iA
\cup 
endsnippet

context "math()"
snippet uuu "bigcup" iA
\bigcup_{${1:i \in ${2:I}}} $0
endsnippet


## BASIC LOGIC ##

snippet AA "forall" iA
\forall
endsnippet

snippet EE "exists" iA
\exists 
endsnippet

context "math()"
snippet iff "iff" iA
\iff 
endsnippet


## BLACKBOARD BOLD ##

## CALCULUS ##

snippet part "partial" iA
\partial 
endsnippet

snippet dv "derivative" iA
\frac{d $1}{d $2} $0
endsnippet

priority 1
snippet pdv "partial derivative" iA
\frac{\partial $1}{\partial $2} $0
endsnippet
priority -100

snippet -> "to" iA
$\to$
endsnippet


context "math()"
snippet nabl "nabla" iA
\nabla 
endsnippet


## INFINITE NUMBERS ##

context "math()"
snippet ooo "infinity" iA
\infty
endsnippet


## BRACKETS ##

# Parentheses
context "math()"
snippet lr( "round brackets" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet
 
context "math()"
snippet lrr "round brackets" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

# Square Brackets
context "math()"
snippet lr[ "square brackets" iA
\left[ ${1:${VISUAL}} \right] $0
endsnippet

context "math()"
snippet lrs "square brackets" iA
\left[ ${1:${VISUAL}} \right] $0
endsnippet

# Braces
context "math()"
snippet lr{ "curly brackets" iA
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

context "math()"
snippet lrc "curly brackets" iA
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

# Other Brackets
context "math()"
snippet lr| "pipes" iA
\left| ${1:${VISUAL}} \right| $0
endsnippet

context "math()"
snippet lrp "pipes" iA
\left| ${1:${VISUAL}} \right| $0
endsnippet

context "math()"
snippet lrdp "double pipes" iA
\left\| ${1:${VISUAL}} \right\| $0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor ${1:${VISUAL}} \right\rfloor $0
endsnippet

context "math()"
snippet ceil "ceil" iA
\left\lceil ${1:${VISUAL}} \right\rceil $0
endsnippet

context "math()"
snippet lr< "angle brackets" iA
\left< ${1:${VISUAL}} \right> $0
endsnippet

context "math()"
snippet lra "angle brackets" iA
\left< ${1:${VISUAL}} \right> $0
endsnippet


## SYMBOLS THAT DO NOT BELONG TO FORMULAS ##

## MISCELLANEOUS ##






## OTHER SYMBOLS??? ##


snippet conj "conjugate" iA
\overline{$1}$0
endsnippet

snippet taylor "taylor" w
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet




snippet sympy "sympyblock" w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet
priority -100



snippet box "Box"
`!p snip.rv = '┌' + '─' * (len(t[1]) + 2) + '┐'`
│ $1 │
`!p snip.rv = '└' + '─' * (len(t[1]) + 2) + '┘'`
$0
endsnippet

snippet "\<(.*?)\|" "bra" riA
\bra{`!p snip.rv = match.group(1).replace('q', f'\psi').replace('f', f'\phi')`}
endsnippet

snippet "\|(.*?)\>" "ket" riA
\ket{`!p snip.rv = match.group(1).replace('q', f'\psi').replace('f', f'\phi')`}
endsnippet

snippet "(.*)\\bra{(.*?)}([^\|]*?)\>" "braket" riA
`!p snip.rv = match.group(1)`\braket{`!p snip.rv = match.group(2)`}{`!p snip.rv = match.group(3).replace('q', f'\psi').replace('f', f'\phi')`}
endsnippet
