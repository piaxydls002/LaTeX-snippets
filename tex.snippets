############
############
## GLOBAL ##
############
############

global !p
# Contexts
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment():
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')")
	return x != '0' and y != '0'

# Constants
environments = ['document',
'figure', 'table',
'description', 'enumerate', 'itemize', 'list',
'math', 'displaymath', 'array', 'eqnarray', 'equation', 'subequations', 'multiline', 'gather', 'align', 'flalign',
'theorem',
'matrix', 'pmatrix', 'bmatrix', 'Bmatrix', 'vmatrix', 'Vmatrix', 'smallmatrix',
'cases',
#'alignat',
'center', 'flushleft', 'flushright', 'minipage', 'quotation', 'quote', 'verbatim', 'verse',
'picture',
'tabbing', 'tabular',
'thebibiliography',
'titlepage']


# Utility functions

def complete(t, opts):
  if t:
    opts = [m[len(t):] for m in opts if m.startswith(t)]
  if len(opts) == 0:
    return ''
  elif len(opts) == 1:
    return opts[0]
  else:
    return '(' + '|'.join(opts) + ')'

def create_row_placeholders(snip):
    # retrieving single line from current string and treat it like tabstops
    # count
    placeholders_amount = int(snip.buffer[snip.line].strip())

    # erase current line
    snip.buffer[snip.line] = ''

    # create anonymous snippet with expected content and number of tabstops
    anon_snippet_body = ' & '.join(['$' + str(i+1) for i in range(placeholders_amount)])

    # expand anonymous snippet
    snip.expand_anon(anon_snippet_body)


def create_table(snip):
	rows = snip.buffer[snip.line].split('x')[0]
	cols = snip.buffer[snip.line].split('x')[1]
	int_val = lambda string: int(''.join(s for s in string if s.isdigit()))
	rows = int_val(rows)
	cols = int_val(cols)
	offset = cols + 1
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]
	snip.buffer[snip.line] = ''
	final_str = old_spacing + "\\begin{tabular}{|" + "|".join(['$' + str(i + 1) for i in range(cols)]) + "|}\n"
	for i in range(rows):
		final_str += old_spacing + '\t'
		final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])
		final_str += " \\\\\\\n"
	final_str += old_spacing + "\\end{tabular}\n$0"
	snip.expand_anon(final_str)
def add_row(snip):
	row_len = int(''.join(s for s in snip.buffer[snip.line] if s.isdigit()))
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]
	snip.buffer[snip.line] = ''
	final_str = old_spacing
	final_str += " & ".join(['$' + str(j + 1) for j in range(row_len)])
	final_str += " \\\\\\"
	snip.expand_anon(final_str)

def create_matrix_placeholders(snip):
	# Create anonymous snippet body
	anon_snippet_body = ""

	# Get start and end line number of expanded snippet
	start = snip.snippet_start[0]
	end = snip.snippet_end[0]

  # Append current line into anonymous snippet
	for i in range(start, end + 1):
		anon_snippet_body += snip.buffer[i]
		anon_snippet_body += "" if i == end else "\n"

	# Delete expanded snippet line till second to last line
	for i in range(start, end):
		del snip.buffer[start]

	# Empty last expanded snippet line while preserving the line
	snip.buffer[start] = ''

	# Expand anonymous snippet
	snip.expand_anon(anon_snippet_body)

def create_matrix(cols, rows, sep, start, end):
	res = ""
	placeholder = 1
	for _ in range(0, int(rows)):
		res += start + f"${placeholder} "
		placeholder += 1
		for _ in range(0, int(cols) - 1):
			res += sep + f" ${placeholder} "
			placeholder += 1
		res += end
	return res[:-1]

endglobal



#################
#################
## ENVIRONMENT ##
#################
#################

snippet template "Basic Template" b
\documentclass[a4paper, 12pt, chapter, oneside]{oblivoir}

\usepackage{mathtools}

\begin{document}

$0

\end{document}
endsnippet

post_jump "create_row_placeholders(snip)"
snippet "tr(\d+)" "latex table row variable" r
`!p snip.rv = match.group(1)`
endsnippet

post_jump "create_matrix_placeholders(snip)"
snippet 'arr(\d+),(\d+)' "LaTeX array" br
\begin{array}{`!p
orient = ""
for _ in range(0, int(match.group(1))): orient += "l"
snip.rv = orient`}
`!p
snip.rv = create_matrix(match.group(1), match.group(2), "&", "\t", "\\\\\\\\\n")
`$0
\end{array}
endsnippet

post_jump "create_matrix_placeholders(snip)"
snippet 'mat(\d+),(\d+)' "LaTeX array" br
\begin{matrix}
`!p
snip.rv = create_matrix(match.group(1), match.group(2), "&", "\t", "\\\\\\\\\n")
`$0
\end{matrix}
endsnippet

snippet begin "begin/end" bA
\begin{${3:$1`!p snip.rv = complete(t[1], environments)`$2}}
	${VISUAL}$0
\end{$3}
endsnippet



##########
##########
## MATH ##
##########
##########

snippet im "Inline Math" w
$${VISUAL}$1$$0
endsnippet

snippet dm "Display Math" w
\[
	${VISUAL}$1
\]$0
endsnippet


########################
# Mathematical Symbols #
########################

## Math Mode Accents ##

context "math()"
## snippet "(?<!\\)(hat|tilde|dot|ddot|bar|vec)" "hat" rwA
snippet "(?<![\w\\])(hat|tilde|dot|ddot|bar|vec)" "hat" rwA
\\`!p snip.rv = match.group(1)`{${VISUAL}$1}$0
endsnippet

## Binary Relations ##

context "math()"
snippet <= "leq" i
\leq
endsnippet

context "math()"
snippet >= "geq" i
\geq
endsnippet

context "math()"
snippet << "ll" i
\ll
endsnippet

context "math()"
snippet >> "gg" i
\gg
endsnippet

context "math()"
snippet == "equiv" i
\equiv
endsnippet

context "math()"
snippet ~ "sim" i
\sim
endsnippet

context "math()"
snippet ~= "simeq" i
\simeq
endsnippet

context "math()"
snippet ~~ "approx" i
\approx
endsnippet

context "math()"
snippet ~== "cong" i
\cong
endsnippet


## Binary Operators ##

context "math()"
snippet +- "pm" iA
\pm
endsnippet

context "math()"
snippet -+ "mp" iA
\mp
endsnippet

context "math()"
snippet . "cdot"
\cdot
endsnippet

context "math()"
snippet x "times"
\times
endsnippet

context "math()"
snippet / "div"
\div
endsnippet


## BIG Operators ##

context "math()"
snippet "(?<!\\)(sum|prod|int|oint)" "hat" rwA
\\`!p snip.rv = match.group(1)`_{$1}^{$2} ${VISUAL}$0
endsnippet

## Arrows ##

context "math()"
snippet <- "l arrow"
\leftarrow
endsnippet

context "math()"
snippet <-- "long l arrow"
\longleftarrow
endsnippet

context "math()"
snippet -> "r arrow"
\rightarrow
endsnippet

context "math()"
snippet --> "long r arrow"
\longrightarrow
endsnippet

context "math()"
snippet <-> "lr arrow"
\leftrightarrow
endsnippet

context "math()"
snippet <--> "long lr arrow"
\longleftrightarrow
endsnippet

context "math()"
snippet <= "L arrow"
\Leftarrow
endsnippet

context "math()"
snippet <== "long L arrow"
\Longleftarrow
endsnippet

context "math()"
snippet => "R arrow"
\Rightarrow
endsnippet

context "math()"
snippet ==> "long R arrow"
\Longrightarrow
endsnippet

context "math()"
snippet <=> "LR arrow"
\Leftrightarrow
endsnippet

context "math()"
snippet <==> "long LR arrow"
\Longleftrightarrow
endsnippet

context "math()"
snippet |-> "maps to"
\mapsto
endsnippet

context "math()"
snippet |--> "long maps to"
\longmapsto
endsnippet


## Arrows as Accents ##



## Miscellaneous Symbols ##

context "math()"
snippet "(l|c|v|d)\.\." "dots" riA
\\`!p snip.rv = match.group(1)`dots
endsnippet

context "math()"
snippet "(?<!\\)hbar" "hbar" rwA
\hbar
endsnippet

context "math()"
snippet nabla "nabla" w
\nabla
endsnippet


## Non-Mathematical Symbols ##

context "math()"
snippet "(?<!\\)dag" "dagger" rwA
\dag
endsnippet

context "math()"
snippet ddag "ddagger" w
\ddag
endsnippet


## Math Alphabets ##

context "math()"
snippet mathrm "mathrm" w
\mathrm{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet mathit "mathit" w
\mathit{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet mathnormal "mathnormal" w
\mathnormal{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet mathcal "mathcal" w
\mathcal{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet mathfrac "mathfrac" w
\mathfrac{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet mathbb "mathbb" w
\mathbb{${1:${VISUAL}}}$0
endsnippet
































## ARITHMETIC OPERATORS ##

context "math()"
snippet xx "cross" iA
\times 
endsnippet

context "math()"
snippet ** "cdot" iA
\cdot 
endsnippet

context "math()"
snippet // "fraction" iA
\frac{${1:${VISUAL}}}{$2} $0
endsnippet

context "math()"
snippet sr "square root" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet nr "nth root" iA
\sqrt[$1]{${2:${VISUAL}}} $0
endsnippet


## EQUALITY, EQUIVALENCE AND SIMILARITY ##

context "math()"
snippet != "not equal" iA
\neq 
endsnippet



## SET THEORY ##

context "math()"
snippet inn "in" iA
\in 
endsnippet

context "math()"
snippet notin "not in" iA
\not\in 
endsnippet

context "math()"
snippet cc "subset" iA
\subset 
endsnippet

context "math()"
snippet Nn "cap" iA
\cap 
endsnippet

context "math()"
snippet nnn "bigcap" iA
\bigcap_{${1:i \in ${2:I}}} $0
endsnippet

context "math()"
snippet UU "cup" iA
\cup 
endsnippet

context "math()"
snippet uuu "bigcup" iA
\bigcup_{${1:i \in ${2:I}}} $0
endsnippet


## BASIC LOGIC ##

snippet AA "forall" iA
\forall
endsnippet

snippet EE "exists" iA
\exists 
endsnippet

context "math()"
snippet iff "iff" iA
\iff 
endsnippet


## BLACKBOARD BOLD ##

## CALCULUS ##

snippet part "partial" iA
\partial 
endsnippet

snippet dv "derivative" iA
\frac{d $1}{d $2} $0
endsnippet

priority 1
snippet pdv "partial derivative" iA
\frac{\partial $1}{\partial $2} $0
endsnippet
priority 0

snippet -> "to" iA
$\to$
endsnippet


context "math()"
snippet nabl "nabla" iA
\nabla 
endsnippet


## INFINITE NUMBERS ##

context "math()"
snippet ooo "infinity" iA
\infty
endsnippet


## BRACKETS ##

# Parentheses
context "math()"
snippet lr( "round brackets" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet
 
context "math()"
snippet lrr "round brackets" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

# Square Brackets
context "math()"
snippet lr[ "square brackets" iA
\left[ ${1:${VISUAL}} \right] $0
endsnippet

context "math()"
snippet lrs "square brackets" iA
\left[ ${1:${VISUAL}} \right] $0
endsnippet

# Braces
context "math()"
snippet lr{ "curly brackets" iA
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

context "math()"
snippet lrc "curly brackets" iA
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

# Other Brackets
context "math()"
snippet lr| "pipes" iA
\left| ${1:${VISUAL}} \right| $0
endsnippet

context "math()"
snippet lrp "pipes" iA
\left| ${1:${VISUAL}} \right| $0
endsnippet

context "math()"
snippet lrdp "double pipes" iA
\left\| ${1:${VISUAL}} \right\| $0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor ${1:${VISUAL}} \right\rfloor $0
endsnippet

context "math()"
snippet ceil "ceil" iA
\left\lceil ${1:${VISUAL}} \right\rceil $0
endsnippet

context "math()"
snippet lr< "angle brackets" iA
\left< ${1:${VISUAL}} \right> $0
endsnippet

context "math()"
snippet lra "angle brackets" iA
\left< ${1:${VISUAL}} \right> $0
endsnippet


## SYMBOLS THAT DO NOT BELONG TO FORMULAS ##

## MISCELLANEOUS ##






## OTHER SYMBOLS??? ##

snippet ^^ "superscript" iA
^{$1} $0
endsnippet

snippet __ "subscript" iA
_{$1} $0
endsnippet







snippet conj "conjugate" iA
\overline{$1}$0
endsnippet

snippet taylor "taylor" w
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet

snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}}
endsnippet




snippet sympy "sympyblock" w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet
priority 0



snippet box "Box"
`!p snip.rv = '┌' + '─' * (len(t[1]) + 2) + '┐'`
│ $1 │
`!p snip.rv = '└' + '─' * (len(t[1]) + 2) + '┘'`
$0
endsnippet

snippet "\<(.*?)\|" "bra" riA
\bra{`!p snip.rv = match.group(1).replace('q', f'\psi').replace('f', f'\phi')`}
endsnippet

snippet "\|(.*?)\>" "ket" riA
\ket{`!p snip.rv = match.group(1).replace('q', f'\psi').replace('f', f'\phi')`}
endsnippet

snippet "(.*)\\bra{(.*?)}([^\|]*?)\>" "braket" riA
`!p snip.rv = match.group(1)`\braket{`!p snip.rv = match.group(2)`}{`!p snip.rv = match.group(3).replace('q', f'\psi').replace('f', f'\phi')`}
endsnippet
