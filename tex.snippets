############
############
## GLOBAL ##
############
############

global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment():
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')")
	return x != '0' and y != '0'

endglobal



#################
#################
## ENVIRONMENT ##
#################
#################

snippet template "Basic Template" b
\documentclass[a4paper, 12pt, chapter, oneside]{oblivoir}

\usepackage{mathtools}

\begin{document}

$0

\end{document}
endsnippet



snippet beg "begin/end" b
\begin{$1}
	${0:${VISUAL}}
\end{$1}
endsnippet

snippet enum "enumerate" b
\begin{enumerate}
	\item ${0:${VISUAL}}
\end{enumerate}
endsnippet

snippet item "itemize" b
\begin{itemize}
	\item ${0:${VISUAL}}
\end{itemize}
endsnippet


##########
##########
## MATH ##
##########
##########

snippet im "Inline Math" w
$$1$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Display Math" w
\[
	${1:${VISUAL}}
\]$0
endsnippet


########################
# Mathematical Symbols #
########################

# https://en.wikipedia.org/wiki/Glossary_of_mathematical_symbols

## ARITHMETIC OPERATORS ##

context "math()"
snippet xx "cross" iA
\times 
endsnippet

context "math()"
snippet ** "cdot" iA
\cdot 
endsnippet

context "math()"
snippet // "fraction" iA
\frac{${1:${VISUAL}}}{$2} $0
endsnippet

context "math()"
snippet sr "square root" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet nr "nth root" iA
\sqrt[$1]{${2:${VISUAL}}} $0
endsnippet


## EQUALITY, EQUIVALENCE AND SIMILARITY ##

context "math()"
snippet != "not equal" iA
\neq 
endsnippet


## COMPARISON ##

context "math()"
snippet <= "leq" iA
\le 
endsnippet

context "math()"
snippet >= "geq" iA
\ge 
endsnippet

context "math()"
snippet << "<<" iA
\ll 
endsnippet

context "math()"
snippet >> ">>" iA
\gg 
endsnippet


## SET THEORY ##

context "math()"
snippet inn "in" iA
\in 
endsnippet

context "math()"
snippet notin "not in" iA
\not\in 
endsnippet

context "math()"
snippet cc "subset" iA
\subset 
endsnippet

context "math()"
snippet Nn "cap" iA
\cap 
endsnippet

context "math()"
snippet nnn "bigcap" iA
\bigcap_{${1:i \in ${2:I}}} $0
endsnippet

context "math()"
snippet UU "cup" iA
\cup 
endsnippet

context "math()"
snippet uuu "bigcup" iA
\bigcup_{${1:i \in ${2:I}}} $0
endsnippet


## BASIC LOGIC ##

snippet AA "forall" iA
\forall
endsnippet

snippet EE "exists" iA
\exists 
endsnippet

context "math()"
snippet => "implies" iA
\implies 
endsnippet

context "math()"
snippet =< "implied by" iA
\impliedby 
endsnippet

context "math()"
snippet iff "iff" iA
\iff 
endsnippet


## BLACKBOARD BOLD ##

## CALCULUS ##

snippet bar "bar" iA
\overline{${1:${VISUAL}}}
endsnippet

snippet hat "hat" iA
\hat{${1:${VISUAL}}}
endsnippet

snippet dot "dot" iA
\dot{${1:${VISUAL}}}
endsnippet

priority 100
snippet ddot "ddot" iA
\ddot{${1:${VISUAL}}}
endsnippet
priority 0

snippet vec "vec" iA
\vec{${1:${VISUAL}}}
endsnippet

snippet part "partial" iA
\partial 
endsnippet

snippet dv "derivative" iA
\frac{d $1}{d $2} $0
endsnippet

priority 1
snippet pdv "partial derivative" iA
\frac{\partial $1}{\partial $2} $0
endsnippet
priority 0

snippet -> "to" iA
\to
endsnippet

priority 100
snippet <-> "lrarrow" iA
\leftrightarrow
endsnippet
priority 0

snippet |> "mapsto" iA
\mapsto
endsnippet

context "math()"
snippet nabl "nabla" iA
\nabla 
endsnippet


## LINEAR AND MULTILINEAR ALGEBRA ##

snippet sum "sum" w
\sum_{n=${1:1}}^{${2:\infty}} ${3:a_n z^n}
endsnippet



## ADVANCED GROUP THEORY ##

## INFINITE NUMBERS ##

context "math()"
snippet ooo "infinity" iA
\infty
endsnippet


## BRACKETS ##

# Parentheses
context "math()"
snippet lr( "round brackets" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet
 
context "math()"
snippet lrr "round brackets" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

# Square Brackets
context "math()"
snippet lr[ "square brackets" iA
\left[ ${1:${VISUAL}} \right] $0
endsnippet

context "math()"
snippet lrs "square brackets" iA
\left[ ${1:${VISUAL}} \right] $0
endsnippet

# Braces
context "math()"
snippet lr{ "curly brackets" iA
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

context "math()"
snippet lrc "curly brackets" iA
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

# Other Brackets
context "math()"
snippet lr| "pipes" iA
\left| ${1:${VISUAL}} \right| $0
endsnippet

context "math()"
snippet lrp "pipes" iA
\left| ${1:${VISUAL}} \right| $0
endsnippet

context "math()"
snippet lrdp "double pipes" iA
\left\| ${1:${VISUAL}} \right\| $0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor ${1:${VISUAL}} \right\rfloor $0
endsnippet

context "math()"
snippet ceil "ceil" iA
\left\lceil ${1:${VISUAL}} \right\rceil $0
endsnippet

context "math()"
snippet lr< "angle brackets" iA
\left< ${1:${VISUAL}} \right> $0
endsnippet

context "math()"
snippet lra "angle brackets" iA
\left< ${1:${VISUAL}} \right> $0
endsnippet


## SYMBOLS THAT DO NOT BELONG TO FORMULAS ##

## MISCELLANEOUS ##






## OTHER SYMBOLS??? ##

snippet ^^ "superscript" iA
^{$1} $0
endsnippet

snippet __ "subscript" iA
_{$1} $0
endsnippet

context "math()"
snippet l.. "ldots" iA
\ldots 
endsnippet

snippet c.. "cdots" iA
\cdots 
endsnippet

snippet v.. "vdots" iA
\vdots 
endsnippet

snippet d.. "ddots" iA
\ddots 
endsnippet






snippet conj "conjugate" iA
\overline{$1}$0
endsnippet

snippet taylor "taylor" w
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet

snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}}
endsnippet




snippet sympy "sympyblock" w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet
priority 0



snippet box "Box"
`!p snip.rv = '┌' + '─' * (len(t[1]) + 2) + '┐'`
│ $1 │
`!p snip.rv = '└' + '─' * (len(t[1]) + 2) + '┘'`
$0
endsnippet
